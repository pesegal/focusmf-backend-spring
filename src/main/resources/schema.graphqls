"""Input to use for login."""
input AuthInput {
  """User's Email"""
  email: String!

  """User's Password"""
  password: String!
}

"""Authorization Token Response"""
type AuthToken {
  """Authorization JWT"""
  token: String!
}

"""Color contains the color information for projects."""
type Color {
  hex: String!
  id: ID!
  name: String!
}

"""Input format for creating a new task"""
input CreateTaskAction {
  actionType: String!
  end: DateTime!
  start: DateTime!

  """A valid Task ID"""
  taskId: String!
}

"""Input format for creating a new task"""
input CreateTaskInput {
  """Initial position in the list. Defaults to 0."""
  columnPos: Float = 0

  """List Id"""
  listId: String!

  """Name of the task"""
  name: String!

  """Notes attached to the task itself"""
  notes: String

  """List of project Id's that are assigned to this task."""
  projectIds: [ID!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""User's identified educational achievement level."""
enum Education {
  AssociatesDegree
  BachelorsDegree
  DoctoralDegree
  HighSchoolDiploma
  LessThanHighSchool
  MastersDegree
  NoDegree
  ProfessionalDegree
}

"""User's identified level of employment."""
enum Employement {
  EmployedFull
  EmployedPart
  EmployedSelf
  Homemaker
  Military
  Retired
  Student
  Unemployed
}

"""User's identified ethnic ancestry."""
enum EthnicOrigin {
  AsianPacificIslander
  Black
  HispanicLatino
  NativeAmerica
  Other
  White
}

"""User's identified gender."""
enum Gender {
  Female
  Male
  Other
}

type HelloWorld {
  message: String!
}

"""User's identified household status."""
enum Household {
  Divorced
  Married
  Separated
  Unmarried
  Widowed
}

"""A List allows a User to apply states to Tasks."""
type List {
  id: ID!
  name: String!
  position: Float!
  tasks: Task!
  user: User!
}

type Mutation {
  createList(name: String!, position: Float!): List!
  createProject(colorName: String!, name: String!): Project!
  createTask(createInput: CreateTaskInput!): Task!
  createTaskAction(taskAction: CreateTaskAction!): TaskAction!
  createUser(userData: UserInput!): AuthToken!
  deleteList(id: String!): List!
  deleteProject(projectInput: ProjectInput!): Project!
  deleteTask(taskId: String!): Task!
  updateList(id: String!, name: String!, position: Float!): List!
  updateProject(projectInput: ProjectInput!): Project!
  updateTask(updateInput: UpdateTaskInput!): Task!
}

type Permission {
  id: ID!
  permission: String!
  user: User!
}

"""
Projects allow grouping of related tasks together for analysis and aggregation.
"""
type Project {
  color: Color!
  id: ID!
  name: String!
  tasks: [Task!]!
  user: User!
}

"""Update Project Input"""
input ProjectInput {
  """Color Id"""
  colorId: String

  """Color Name"""
  colorName: String

  """Needs to be a valid project UUID."""
  id: String!

  """Project name!"""
  name: String
}

type Query {
  allUsers: [User!]!
  findListsByUser: [List!]!
  findUserByEmail(userEmail: String!): User!
  findUserById(userId: String!): User!
  getAllTaskActions: [TaskAction!]!
  getProjects: [Project!]!
  getTasks: [Task!]!
  hello: HelloWorld!
  helloAdmin: HelloWorld!
  helloBasic: HelloWorld!
  loginUser(loginData: AuthInput!): AuthToken!
}

"""
Tasks represent a specific goal or item, that you can track your work against.
"""
type Task {
  columnPos: Float!
  id: ID!
  list: List!
  name: String!
  notes: String!
  projects: [Project!]!
  taskActions: [TaskAction!]!
  user: User!
}

"""TaskAction represents a time action recorded against a task."""
type TaskAction {
  actionType: String!
  end: DateTime!
  id: ID!
  start: DateTime!
  task: Task!
}

"""Input format for updating a task."""
input UpdateTaskInput {
  """Initial position in the list. Defaults to 0."""
  columnPos: Float = 0

  """Task's ID"""
  id: String!

  """List Id"""
  listId: String

  """Name of the task"""
  name: String

  """Notes attached to the task itself"""
  notes: String

  """List of project Id's that are assigned to this task."""
  projectIds: [ID!]
}

"""User's identified reason for sign-up."""
enum Usage {
  CreativeWork
  DailyTasks
  ImproveHabits
  Introspection
  ProfessionalWork
  TechnicalWork
}

"""A Focus.mf User."""
type User {
  dateofbirth: DateTime
  education: Education

  """The users email. Standard email requirements."""
  email: String!
  employment: Employement
  ethnic_origin: EthnicOrigin
  first_name: String
  gender: Gender
  household: Household
  id: ID!
  last_name: String
  lists: [List!]!
  permissions: [Permission!]!
  projects: [Project!]
  tasks: [Task!]
  usage: Usage
  verified: Boolean!
}

"""Create User Input"""
input UserInput {
  """Needs to be a valid date string."""
  dateofbirth: DateTime
  education: Education

  """Needs to be an email between 6 and 320 chars."""
  email: String!
  employment: Employement
  ethnic_origin: EthnicOrigin

  """Max Length 50 chars."""
  first_name: String
  gender: Gender
  household: Household

  """Max Length 50 chars."""
  last_name: String

  """Password between 8 and 50 chars in length."""
  password: String!
  usage: Usage
}
